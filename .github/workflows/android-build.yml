name: Build Android (auto-create app if missing)

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Optional: unzip a project skeleton you’ve added to the repo root
      - name: Unzip TitanApp_Rebuild.zip (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f TitanApp_Rebuild.zip ]; then
            echo "Found TitanApp_Rebuild.zip — extracting…"
            unzip -o TitanApp_Rebuild.zip -d .
          else
            echo "No TitanApp_Rebuild.zip found — skipping."
          fi

      # If there isn't already a Gradle project at Titan/app, create a minimal one
      - name: Ensure Gradle project exists (auto-generate tiny app)
        shell: bash
        run: |
          set -euo pipefail

          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"

          # If it already exists (settings + module dir), skip creation
          if [ -f "$ROOT/settings.gradle.kts" ] && [ -d "$ROOT/$APP" ]; then
            echo "Existing Gradle project detected at $ROOT (module '$APP')."
            exit 0
          fi

          echo "No Gradle project found at $ROOT — creating a minimal Android app…"
          mkdir -p "$ROOT/$APP/src/main/java/com/example/helloworld"
          mkdir -p "$ROOT/$APP/src/main/res/layout"
          mkdir -p "$ROOT/$APP/src/main/res/values"

          # settings.gradle.kts
          cat > "$ROOT/settings.gradle.kts" <<'EOF'
          pluginManagement {
            repositories {
              gradlePluginPortal()
              google()
              mavenCentral()
            }
          }

          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
              google()
              mavenCentral()
            }
          }

          rootProject.name = "Titan"
          include(":app")
          EOF

          # build.gradle.kts (project)
          cat > "$ROOT/build.gradle.kts" <<'EOF'
          buildscript {
            repositories {
              google()
              mavenCentral()
            }
            dependencies {
              classpath("com.android.tools.build:gradle:8.2.2")
              classpath(kotlin("gradle-plugin", version = "1.9.10"))
            }
          }

          allprojects {
            repositories {
              google()
              mavenCentral()
            }
          }
          EOF

          # build.gradle.kts (app)
          cat > "$ROOT/$APP/build.gradle.kts" <<'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
          }

          android {
            namespace = "com.example.helloworld"
            compileSdk = 34

            defaultConfig {
              applicationId = "com.example.helloworld"
              minSdk = 24
              targetSdk = 34
              versionCode = 1
              versionName = "1.0"
              testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
              release {
                isMinifyEnabled = false
                proguardFiles(
                  getDefaultProguardFile("proguard-android-optimize.txt"),
                  "proguard-rules.pro"
                )
              }
            }

            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions {
              jvmTarget = "17"
            }
          }

          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
            testImplementation("junit:junit:4.13.2")
            androidTestImplementation("androidx.test.ext:junit:1.2.1")
            androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
          }
          EOF

          # AndroidManifest.xml
          cat > "$ROOT/$APP/src/main/AndroidManifest.xml" <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.helloworld">
            <application
                android:label="HelloWorld"
                android:icon="@mipmap/ic_launcher"
                android:allowBackup="true"
                android:supportsRtl="true">
              <activity android:name="com.example.helloworld.MainActivity">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          # MainActivity.kt
          cat > "$ROOT/$APP/src/main/java/com/example/helloworld/MainActivity.kt" <<'EOF'
          package com.example.helloworld

          import android.os.Bundle
          import androidx.appcompat.app.AppCompatActivity

          class MainActivity : AppCompatActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_main)
              }
          }
          EOF

          # res/layout/activity_main.xml
          cat > "$ROOT/$APP/src/main/res/layout/activity_main.xml" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:gravity="center"
              android:orientation="vertical">

              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="Hello, Titan!"
                  android:textSize="20sp"/>
          </LinearLayout>
          EOF

          # res/values/strings.xml
          mkdir -p "$ROOT/$APP/src/main/res/values"
          cat > "$ROOT/$APP/src/main/res/values/strings.xml" <<'EOF'
          <resources>
            <string name="app_name">HelloWorld</string>
          </resources>
          EOF

      - name: Verify project layout (with hints)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"

          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 2) =="
          find "$ROOT" -maxdepth 2 -printf '%y %p\n' | sort

          if [ ! -f "$ROOT/settings.gradle.kts" ]; then
            echo "::error::Missing $ROOT/settings.gradle.kts"
            exit 1
          fi
          if [ ! -d "$ROOT/$APP" ]; then
            echo "::error::Expected module directory '$ROOT/$APP' not found."
            exit 1
          fi

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        shell: bash
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -euo pipefail
          cd "${PROJECT_ROOT}"
          if [ -f ./gradlew ]; then
            echo 'GRADLE_CMD=./gradlew' >> "$GITHUB_OUTPUT"
          else
            echo "Gradle wrapper not found — downloading 8.7…"
            cd ..
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip
            echo "$PWD/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo 'GRADLE_CMD=gradle' >> "$GITHUB_OUTPUT"
          fi

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -euo pipefail
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${PROJECT_ROOT}" --no-daemon :${APP_MODULE}:assembleDebug --stacktrace --info

      # Handy hints if things fail
      - name: Summarize Gradle errors (best-effort)
        if: failure()
        shell: bash
        run: |
          echo "==== Looking for Kotlin/Java error lines ===="
          grep -RIn --no-messages -E ": error:| FAILURE:|BUILD FAILED|Exception" "${PROJECT_ROOT}" || true

      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs…"
          find . -type f -name "*.apk" -print || true

      - name: Debug: print project structure on failure
        if: failure()
        shell: bash
        run: |
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -printf '%y %p\n' | sort
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle.kts" \) -print || true

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/${{ env.APP_MODULE }}/build/outputs/apk/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
