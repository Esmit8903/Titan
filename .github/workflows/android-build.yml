name: Build Android (auto-create app if missing)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout repo
      # v4 uses sparse-checkout by default; this is fine
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        shell: bash
        run: |
          set -euo pipefail
          ANDROID_HOME="$HOME/android-sdk"
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o /tmp/ct.zip
          unzip -q /tmp/ct.zip -d "$ANDROID_HOME/cmdline-tools"
          mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          sdkmanager --sdk_root="$ANDROID_HOME" "platforms;android-34" "build-tools;34.0.0"

      - name: Install Gradle 8.7 (no-wrapper fallback)
        id: igradle
        shell: bash
        run: |
          set -euo pipefail
          curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /tmp/gradle.zip
          unzip -q /tmp/gradle.zip -d "$HOME/gradle"
          echo "bin=$HOME/gradle/gradle-8.7/bin/gradle" >> "$GITHUB_OUTPUT"

      - name: Unzip TitanApp_Rebuild.zip (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f TitanApp_Rebuild.zip ]; then
            echo "Found TitanApp_Rebuild.zip — extracting into ./"
            unzip -o TitanApp_Rebuild.zip -d ./
          else
            echo "No TitanApp_Rebuild.zip found — skipping."
          fi

      - name: Ensure Gradle project exists (auto-generate tiny app)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "${PROJECT_ROOT}/${APP_MODULE}/src" ] && [ -f "${PROJECT_ROOT}/settings.gradle" ]; then
            echo "Gradle project already exists at ${PROJECT_ROOT}."
            exit 0
          fi

          echo "No Gradle project found. Creating a minimal Android app under ${PROJECT_ROOT}/${APP_MODULE} …"
          mkdir -p "${PROJECT_ROOT}/${APP_MODULE}/src/main/java/com/example/titan"
          mkdir -p "${PROJECT_ROOT}/${APP_MODULE}/src/main/res/values"

          # settings.gradle (Groovy)
          cat > "${PROJECT_ROOT}/settings.gradle" <<'EOF'
          pluginManagement {
            repositories {
              gradlePluginPortal()
              google()
              mavenCentral()
            }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
              google()
              mavenCentral()
            }
          }
          rootProject.name = "Titan"
          include(":app")
          EOF

          # Root build.gradle (Groovy) – keep minimal, repositories at module level
          cat > "${PROJECT_ROOT}/build.gradle" <<'EOF'
          allprojects {
            repositories {
              google()
              mavenCentral()
            }
          }
          EOF

          # Module build.gradle (Groovy)
          cat > "${PROJECT_ROOT}/${APP_MODULE}/build.gradle" <<'EOF'
          plugins {
            id 'com.android.application' version '8.6.0'
            id 'org.jetbrains.kotlin.android' version '1.9.24'
          }

          android {
            namespace "com.example.titan"
            compileSdk 34

            defaultConfig {
              applicationId "com.example.titan"
              minSdk 24
              targetSdk 34
              versionCode 1
              versionName "1.0"
            }

            buildTypes {
              release {
                minifyEnabled false
              }
            }

            compileOptions {
              sourceCompatibility JavaVersion.VERSION_17
              targetCompatibility JavaVersion.VERSION_17
            }

            kotlinOptions {
              jvmTarget = '17'
            }
          }

          dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.24"
            implementation 'androidx.core:core-ktx:1.13.1'
            implementation 'androidx.appcompat:appcompat:1.7.0'
            implementation 'com.google.android.material:material:1.12.0'
          }
          EOF

          # Minimal AndroidManifest.xml
          cat > "${PROJECT_ROOT}/${APP_MODULE}/src/main/AndroidManifest.xml" <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.titan">
            <application
                android:label="Titan"
                android:icon="@mipmap/ic_launcher">
              <activity android:name=".MainActivity">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          # Minimal MainActivity.kt
          cat > "${PROJECT_ROOT}/${APP_MODULE}/src/main/java/com/example/titan/MainActivity.kt" <<'EOF'
          package com.example.titan

          import android.os.Bundle
          import androidx.activity.ComponentActivity

          class MainActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
            }
          }
          EOF

          # Simple strings.xml so resources exist
          cat > "${PROJECT_ROOT}/${APP_MODULE}/src/main/res/values/strings.xml" <<'EOF'
          <resources>
            <string name="app_name">Titan</string>
          </resources>
          EOF

      - name: Pick Gradle command
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          if [ -x "${PROJECT_ROOT}/gradlew" ]; then
            chmod +x "${PROJECT_ROOT}/gradlew"
            echo "cmd=${PROJECT_ROOT}/gradlew" >> "$GITHUB_OUTPUT"
          else
            echo "cmd=${{ steps.igradle.outputs.bin }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Debug APK
        shell: bash
        run: |
          set -euo pipefail
          "${{ steps.pick.outputs.cmd }}" -p "${PROJECT_ROOT}" --no-daemon :${APP_MODULE}:assembleDebug

      # Handy hints if things fail
      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs…"
          find . -type f -name "*.apk" -print || true

      - name: "Debug: print project structure on failure"
        if: failure()
        shell: bash
        run: |
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -print
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle" -o -name "settings.gradle.kts" \) -print

      - name: Compute artifact name
        id: artifact
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          # Typical path created by assembleDebug
          APK=$(ls -1 ${PROJECT_ROOT}/${APP_MODULE}/build/outputs/apk/debug/*.apk 2>/dev/null | head -n1 || true)
          if [ -n "$APK" ]; then
            TS=$(date +%Y%m%d-%H%M%S)
            NAME="Titan-${APP_MODULE}-debug-${TS}.apk"
            echo "apk_name=$NAME" >> "$GITHUB_OUTPUT"
            echo "apk_path=$APK"  >> "$GITHUB_OUTPUT"
            echo "Found APK: $APK"
          else
            # Fallback to a broad glob so upload step can still catch it
            echo "apk_name=Titan-debug-unknown-${RANDOM}.apk" >> "$GITHUB_OUTPUT"
            echo "apk_path=**/build/outputs/apk/**/*.apk"     >> "$GITHUB_OUTPUT"
            echo "No direct APK found at the usual path; will use a glob."
          fi

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.apk_name }}
          path: ${{ steps.artifact.outputs.apk_path }}
          if-no-files-found: warn
