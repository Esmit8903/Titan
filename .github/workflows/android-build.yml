name: Build Titan (Debug APK)

on:
  push:
    paths:
      - ".github/workflows/android-build.yml"
      - "TitanApp_Rebuild.zip"
      - "TitanApp/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Unzip project
        run: unzip -q TitanApp_Rebuild.zip -d TitanApp

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Detect Android project dir
        id: detect
        shell: bash
        run: |
          set -e
          # Your zip extracts to TitanApp/TitanAppApp styleâ€”keep it simple:
          echo "PROJECT_DIR=TitanApp" >> "$GITHUB_OUTPUT"
          echo "Detected PROJECT_DIR=TitanApp"

      - name: Make gradlew executable (if present)
        working-directory: ${{ steps.detect.outputs.PROJECT_DIR }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.PROJECT_DIR }}"
          if [ -f ./gradlew ]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            cd ~
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip
            echo "$HOME/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      # settings.gradle.kts (no heredocs)
      - name: Write settings.gradle.kts
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.detect.outputs.PROJECT_DIR }}"
          FILE="$ROOT/settings.gradle.kts"
          printf '%s\n' \
            'pluginManagement {' \
            '  repositories {' \
            '    gradlePluginPortal()' \
            '    google()' \
            '    mavenCentral()' \
            '  }' \
            '  plugins {' \
            '    id("com.android.application") version "8.5.2"' \
            '    id("org.jetbrains.kotlin.android") version "1.9.24"' \
            '  }' \
            '}' \
            '' \
            'dependencyResolutionManagement {' \
            '  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)' \
            '  repositories {' \
            '    google()' \
            '    mavenCentral()' \
            '  }' \
            '}' \
            '' \
            'rootProject.name = "TitanApp"' \
            'include(":app")' \
            > "$FILE"
          echo "Wrote $FILE"

      # app/build.gradle.kts (create if missing + patch for Java17/Compose)
      - name: Ensure app/build.gradle.kts exists and is Java17/Compose ready
        shell: bash
        run: |
          set -e
          APP_KTS="${{ steps.detect.outputs.PROJECT_DIR }}/app/build.gradle.kts"
          mkdir -p "${APP_KTS%/*}"

          if [ ! -f "$APP_KTS" ]; then
            printf '%s\n' \
              'plugins {' \
              '  id("com.android.application")' \
              '  id("org.jetbrains.kotlin.android")' \
              '}' \
              '' \
              'android {' \
              '  namespace = "com.example.titan"' \
              '  compileSdk = 34' \
              '' \
              '  defaultConfig {' \
              '    applicationId = "com.example.titan"' \
              '    minSdk = 26' \
              '    targetSdk = 34' \
              '    versionCode = 1' \
              '    versionName = "1.0"' \
              '  }' \
              '' \
              '  buildFeatures { compose = true }' \
              '  composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }' \
              '' \
              '  compileOptions {' \
              '    sourceCompatibility = JavaVersion.VERSION_17' \
              '    targetCompatibility = JavaVersion.VERSION_17' \
              '  }' \
              '' \
              '  kotlinOptions {' \
              '    jvmTarget = "17"' \
              '    freeCompilerArgs += listOf(' \
              '      "-Xskip-prerelease-check",' \
              '      "-opt-in=kotlin.RequiresOptIn",' \
              '      "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",' \
              '      "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",' \
              '      "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi"' \
              '    )' \
              '  }' \
              '}' \
              '' \
              'dependencies {' \
              '  // Compose BOM + core UI' \
              '  val composeBom = platform("androidx.compose:compose-bom:2024.06.00")' \
              '  implementation(composeBom)' \
              '  androidTestImplementation(composeBom)' \
              '  implementation("androidx.compose.ui:ui")' \
              '  implementation("androidx.compose.ui:ui-tooling-preview")' \
              '  debugImplementation("androidx.compose.ui:ui-tooling")' \
              '  implementation("androidx.compose.material3:material3")' \
              '  implementation("androidx.activity:activity-compose:1.9.0")' \
              '' \
              '  // Kotlin / Android basics' \
              '  implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.9.24"))' \
              '  implementation("androidx.core:core-ktx:1.12.0")' \
              '  implementation("androidx.appcompat:appcompat:1.6.1")' \
              '}' \
              > "$APP_KTS"
            echo "Created $APP_KTS"
          else
            # If it exists, make sure Java 17 compileOptions are present
            if ! grep -q 'compileOptions' "$APP_KTS"; then
              awk '1; /android *\{/ && !ins {print "  compileOptions { sourceCompatibility = JavaVersion.VERSION_17"; print "    targetCompatibility = JavaVersion.VERSION_17"; print "  }"; ins=1}' "$APP_KTS" > tmp && mv tmp "$APP_KTS"
              echo "Patched compileOptions into $APP_KTS"
            fi
          fi

          echo "Final $APP_KTS:"
          sed -n '1,260p' "$APP_KTS"

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -e
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          # Save full log for analysis
          ${CMD} -p "${{ steps.detect.outputs.PROJECT_DIR }}" --no-daemon :app:assembleDebug --stacktrace --info | tee /tmp/gradle.log

      - name: Show Kotlin/Java errors (if failed)
        if: failure()
        shell: bash
        run: |
          echo "===== Kotlin error lines ====="
          grep -n "^[[:space:]]*e: "
