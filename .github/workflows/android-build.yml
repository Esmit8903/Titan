name: Build Titan (Debug APK)

on:
  workflow_dispatch:
  push:
    paths:
      - 'TitanApp_Rebuild.zip'
      - '.github/workflows/android-build.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Unzip project
        run: unzip -q TitanApp_Rebuild.zip -d TitanApp

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Detect Android project dir
        shell: bash
        run: |
          set -e
          D=$(dirname "$(find TitanApp -maxdepth 3 -name "settings.gradle*" -print -quit || true)")
          if [ -z "$D" ] || [ "$D" = "." ]; then
            D=$(find TitanApp -maxdepth 4 -type d -path "*/app" -print -quit | sed 's#/app$##')
          fi
          echo "PROJECT_DIR=$D" | tee -a $GITHUB_ENV
          test -n "$D" && echo "Detected PROJECT_DIR=$D"

      - name: Print project tree (debug)
        shell: bash
        run: |
          echo "PROJECT_DIR=$PROJECT_DIR"
          ls -la "$PROJECT_DIR" || true
          ls -la "$PROJECT_DIR/app" || true
          echo "Gradle build files:"
          find "$PROJECT_DIR" -maxdepth 4 -type f -name "build.gradle*" -print || true
          echo "Settings file(s):"
          ls -la "$PROJECT_DIR"/settings.gradle* || true

      - name: Use Gradle wrapper if available, else download Gradle 8.7
        shell: bash
        run: |
          if [ -f "$PROJECT_DIR/gradlew" ]; then
            echo "WRAPPER=1" >> $GITHUB_ENV
            chmod +x "$PROJECT_DIR/gradlew"
          else
            echo "WRAPPER=0" >> $GITHUB_ENV
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d $HOME/gradle
            echo "$HOME/gradle/gradle-8.7/bin" >> $GITHUB_PATH
          fi

      #######################################################################
      # Normalize settings.gradle/settings.gradle.kts (repositories + include)
      #######################################################################
      - name: Normalize settings.gradle / settings.gradle.kts
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="TitanApp"
          ROOT="$PROJECT_DIR"
          APP_DIR="$PROJECT_DIR/app"

          if [ ! -d "$APP_DIR" ]; then
            echo "::error::App module not found at $APP_DIR"
            exit 1
          fi

          if [ -f "$ROOT/settings.gradle.kts" ]; then
            echo "Backing up existing settings.gradle.kts"
            cp "$ROOT/settings.gradle.kts" "$ROOT/settings.gradle.kts.bak" || true
            cat > "$ROOT/settings.gradle.kts" <<'EOF'
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "TitanApp"
include(":app")
EOF
          else
            # Groovy by default
            echo "Backing up existing settings.gradle (if any)"
            [ -f "$ROOT/settings.gradle" ] && cp "$ROOT/settings.gradle" "$ROOT/settings.gradle.bak" || true
            cat > "$ROOT/settings.gradle" <<'EOF'
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "TitanApp"
include(":app")
EOF
          fi

          echo "Final settings file content:"
          echo "-----"
          [ -f "$ROOT/settings.gradle.kts" ] && sed -n '1,200p' "$ROOT/settings.gradle.kts" || true
          [ -f "$ROOT/settings.gradle" ] && sed -n '1,200p' "$ROOT/settings.gradle" || true
          echo "-----"

      ########################################################
      # Force Java/Kotlin 17 across all modules (safe sweeper)
      ########################################################
      - name: Force Java/Kotlin 17 across all modules
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find "$PROJECT_DIR" -maxdepth 4 -type f \( -name "build.gradle" -o -name "build.gradle.kts" \))
          echo "Found ${#FILES[@]} Gradle files to patch"
          for F in "${FILES[@]}"; do
            echo "Patching $F"
            LC_ALL=C tr -cd '\11\12\15\40-\176' < "$F" > "$F.clean" && mv "$F.clean" "$F"
            sed -i 's/JavaVersion\.VERSION_1_8/JavaVersion.VERSION_17/g' "$F"
            sed -i 's/sourceCompatibility *=[^0-9A-Za-z]*1\.8/sourceCompatibility JavaVersion.VERSION_17/g' "$F"
            sed -i 's/targetCompatibility *=[^0-9A-Za-z]*1\.8/targetCompatibility JavaVersion.VERSION_17/g' "$F"
            sed -i 's/jvmTarget *= *["'\''"]\?[0-9][0-9]*["'\''"]\?/jvmTarget = "17"/g' "$F"

            # Ensure android { compileOptions {} } exists
            if grep -q "android *{" "$F" && ! grep -q "compileOptions" "$F"; then
              awk 'BEGIN{ins=0} /android *\{/ && ins==0 {print; print "    compileOptions {"; print "        sourceCompatibility JavaVersion.VERSION_17"; print "        targetCompatibility JavaVersion.VERSION_17"; print "    }"; ins=1; next} {print}' "$F" > tmp && mv tmp "$F"
            fi
            # Ensure kotlinOptions { jvmTarget = "17" }
            if grep -q "android *{" "$F" && ! grep -q "kotlinOptions" "$F"; then
              awk 'BEGIN{ins=0} /android *\{/ && ins==0 {print; print "    kotlinOptions {"; print "        jvmTarget = \"17\""; print "    }"; ins=1; next} {print}' "$F" > tmp && mv tmp "$F"
            fi
          done

      # Optional: add common Compose opt-ins (helps many Kotlin/Compose projects)
      - name: Add Compose/Kotlin opt-in flags
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find "$PROJECT_DIR" -maxdepth 4 -type f \( -name "build.gradle" -o -name "build.gradle.kts" \))
          for F in "${FILES[@]}"; do
            if grep -q "android *{" "$F"; then
              sed -i 's/jvmTarget *= *["'\''"]\?[0-9][0-9]*["'\''"]\?/jvmTarget = "17"/g' "$F"
              if ! grep -q "freeCompilerArgs" "$F"; then
                awk '
                  BEGIN{inKO=0; done=0}
                  /kotlinOptions *\{/ {inKO=1}
                  inKO && /}/ && done==0 {
                    print "        freeCompilerArgs += [";
                    print "            \"-opt-in=androidx.compose.material3.ExperimentalMaterial3Api\",";
                    print "            \"-opt-in=androidx.compose.material.ExperimentalMaterialApi\",";
                    print "            \"-opt-in=androidx.compose.animation.ExperimentalAnimationApi\",";
                    print "            \"-opt-in=androidx.compose.foundation.ExperimentalFoundationApi\",";
                    print "            \"-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi\",";
                    print "            \"-opt-in=kotlinx.coroutines.FlowPreview\"";
                    print "        ]";
                    done=1
                  }
                  { print }
                  /}/ && inKO { inKO=0 }
                ' "$F" > tmp && mv tmp "$F"
              fi
            fi
          done

      - name: Build Debug APK (verbose)
        shell: bash
        run: |
          set -e
          if [ "$WRAPPER" = "1" ]; then
            "$PROJECT_DIR/gradlew" -p "$PROJECT_DIR" --no-daemon :app:assembleDebug --stacktrace --info
          else
            gradle -v
            gradle -p "$PROJECT_DIR" --no-daemon :app:assembleDebug --stacktrace --info
          fi
          echo "=== Built files ==="
          find "$PROJECT_DIR" -type f \( -name "*.apk" -o -name "*.aab" \) -print || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-artifacts
          path: |
            ${{ env.PROJECT_DIR }}/**/build/outputs/**/*.apk
            ${{ env.PROJECT_DIR }}/**/build/outputs/**/*.aab
          retention-days: 14
