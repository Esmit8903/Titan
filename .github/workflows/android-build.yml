name: Build Android (auto-heal, Titan/app)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      # ---------- Optional: unpack your rebuild zip if present ----------
      - name: If present, unzip TitanApp_Rebuild.zip into $PROJECT_ROOT
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f "TitanApp_Rebuild.zip" ]]; then
            echo "Zip found. Unpacking into ${PROJECT_ROOT} ..."
            mkdir -p "${PROJECT_ROOT}"
            unzip -o -q TitanApp_Rebuild.zip -d "${PROJECT_ROOT}"
          else
            echo "No rebuild zip found. Continuing..."
          fi

      # ---------- Auto-create a minimal project if missing ----------
      - name: Ensure Gradle project exists (or generate tiny app)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"
          mkdir -p "$ROOT"

          # settings.gradle.kts
          if [[ ! -f "$ROOT/settings.gradle.kts" ]]; then
            cat > "$ROOT/settings.gradle.kts" <<'EOF'
            pluginManagement {
              repositories {
                gradlePluginPortal()
                google()
                mavenCentral()
              }
            }
            dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                google()
                mavenCentral()
              }
            }
            rootProject.name = "Titan"
            include(":app")
            EOF
            echo "Created $ROOT/settings.gradle.kts"
          fi

          # Create app module if missing
          if [[ ! -d "$ROOT/$APP" ]]; then
            echo "No $ROOT/$APP module found. Creating minimal Android app..."
            mkdir -p "$ROOT/$APP/src/main/java/com/example/titan"
            mkdir -p "$ROOT/$APP/src/main/res/values"

            # app/build.gradle.kts
            cat > "$ROOT/$APP/build.gradle.kts" <<'EOF'
            plugins {
              id("com.android.application") version "8.5.2"
              id("org.jetbrains.kotlin.android") version "1.9.24"
            }

            android {
              namespace = "com.example.titan"
              compileSdk = 34

              defaultConfig {
                applicationId = "com.example.titan"
                minSdk = 26
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"
              }

              buildTypes {
                release {
                  isMinifyEnabled = false
                  proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
                  )
                }
              }

              compileOptions {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
              }
              kotlinOptions {
                jvmTarget = "17"
              }
            }

            dependencies {
              implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.9.24"))
              implementation("androidx.core:core-ktx:1.12.0")
              implementation("androidx.appcompat:appcompat:1.6.1")
              implementation("com.google.android.material:material:1.11.0")
            }
            EOF

            # AndroidManifest.xml
            cat > "$ROOT/$APP/src/main/AndroidManifest.xml" <<'EOF'
            <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <application android:label="Titan">
                <activity android:name=".MainActivity">
                  <intent-filter>
                    <action android:name="android.intent.action.MAIN"/>
                    <category android:name="android.intent.category.LAUNCHER"/>
                  </intent-filter>
                </activity>
              </application>
            </manifest>
            EOF

            # MainActivity.kt
            cat > "$ROOT/$APP/src/main/java/com/example/titan/MainActivity.kt" <<'EOF'
            package com.example.titan

            import android.app.Activity
            import android.os.Bundle
            import android.widget.TextView

            class MainActivity : Activity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                val tv = TextView(this).apply { text = "Hello from Titan!" }
                setContentView(tv)
              }
            }
            EOF

            # strings.xml
            cat > "$ROOT/$APP/src/main/res/values/strings.xml" <<'EOF'
            <resources>
              <string name="app_name">Titan</string>
            </resources>
            EOF

            # proguard (optional)
            echo "# keep rules here" > "$ROOT/$APP/proguard-rules.pro"
          fi

      # ---------- Quick sanity checks with actionable hints ----------
      - name: Verify project layout (fail-fast with hints)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"
          echo "Using settings file: ${ROOT}/settings.gradle.kts"
          if [[ ! -f "${ROOT}/settings.gradle.kts" ]]; then
            echo "::error::Missing ${ROOT}/settings.gradle.kts. Create it with: rootProject.name = \"Titan\" and include(\":${APP}\")"
            exit 1
          fi
          if [[ ! -d "${ROOT}/${APP}" ]]; then
            echo "::error::Expected directory '${ROOT}/${APP}' (module '${APP}') not found."
            exit 1
          fi

      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [[ -f ./gradlew ]]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -e
          if [[ -f "${PROJECT_ROOT}/gradlew" ]]; then
            echo "GRADLE_CMD=${PROJECT_ROOT}/gradlew" >> "$GITHUB_OUTPUT"
          else
            echo "No wrapper, downloading Gradle 8.7..."
            curl -sL -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d "$HOME/gradle"
            echo "$HOME/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -e
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${PROJECT_ROOT}" :${APP_MODULE}:assembleDebug --no-daemon --stacktrace

      # ----------------- Helpful diagnostics -----------------
      - name: Summarize Gradle errors (best-effort)
        if: failure()
        shell: bash
        run: |
          echo "==== Looking for Kotlin/Java error lines ===="
          grep -RIn --line-number --no-messages -e "e: " -e "error:" -e "FAILED" "${PROJECT_ROOT}" || true

      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs..."
          find . -type f -name "*.apk" -print || true

      - name: "Debug: print project structure on failure"
        if: failure()
        shell: bash
        run: |
          set -e
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find . -maxdepth 3 -printf "%y %p\n" | sort
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle" -o -name "settings.gradle.kts" \) -print

      # ----------------- Upload whatever APKs we can find -----------------
      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/**/outputs/apk/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
