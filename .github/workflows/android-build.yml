name: Build Android (with optional unzip + auto-create Kotlin app)

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Optional unzip step
      - name: Unzip TitanApp_Rebuild.zip (if present)
        run: |
          set -euo pipefail
          if [ -f TitanApp_Rebuild.zip ]; then
            echo "Found TitanApp_Rebuild.zip — extracting..."
            unzip -o TitanApp_Rebuild.zip -d .
          else
            echo "No TitanApp_Rebuild.zip found — skipping."
          fi

      # Guard check — verify structure OR auto-create Kotlin app
      - name: Ensure Gradle project exists (or auto-generate Kotlin app)
        run: |
          set -euo pipefail
          echo "== Checking for Gradle project =="
          if [ ! -f settings.gradle ] && [ ! -f settings.gradle.kts ]; then
            echo "No Gradle settings found — creating minimal Android Kotlin app..."
            mkdir -p app/src/main/java/com/example/helloworld
            mkdir -p app/src/main/res/layout
            mkdir -p app/src/main/res/values

            cat > settings.gradle.kts <<'EOF'
rootProject.name = "Titan"
include(":app")
EOF

            cat > build.gradle.kts <<'EOF'
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.2.2")
        classpath(kotlin("gradle-plugin", version = "1.9.10"))
    }
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
EOF

            cat > app/build.gradle.kts <<'EOF'
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}
android {
    namespace = "com.example.helloworld"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.helloworld"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
    }
    buildFeatures {
        viewBinding = true
    }
}
dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.10")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.9.0")
}
EOF

            cat > app/src/main/java/com/example/helloworld/MainActivity.kt <<'EOF'
package com.example.helloworld

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.widget.TextView

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val tv = TextView(this)
        tv.text = "Hello World from Titan (Kotlin)!"
        setContentView(tv)
    }
}
EOF
          else
            echo "Gradle project found."
          fi

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Make gradlew executable (if present)
        run: |
          if [ -f gradlew ]; then
            chmod +x gradlew
          else
            echo "gradlew not found — will rely on generated gradlew if available."
          fi

      - name: Build Debug APK (capture full log)
        run: ./gradlew assembleDebug --stacktrace

      - name: Summarize Gradle errors (best-effort)
        if: failure()
        run: |
          echo "===== Kotlin/Java error lines ====="
          grep -i -E "error|exception|failed" **/*.gradle* **/*.kt **/*.java || true

      - name: Show any APKs that exist (any path)
        run: |
          echo "Searching for APKs..."
          find . -type f -name "*.apk" || true

      - name: Debug: print project structure on failure
        if: failure()
        run: |
          echo "== repo root =="
          ls -R | head -n 200

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Titan-debug-apk
          path: "**/build/outputs/apk/**/*.apk"
