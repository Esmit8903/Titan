name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ROOT: Titan
  APP_MODULE: app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Unzip TitanApp_Rebuild.zip (if present)
        run: |
          set -euo pipefail
          if [ -f TitanApp_Rebuild.zip ]; then
            echo "Found TitanApp_Rebuild.zip → extracting..."
            unzip -o TitanApp_Rebuild.zip -d ./
          fi

      - name: Ensure Gradle project exists (auto-generate tiny app if needed)
        run: |
          set -euo pipefail
          if [ ! -f "${PROJECT_ROOT}/settings.gradle" ] && [ ! -f "${PROJECT_ROOT}/settings.gradle.kts" ]; then
            echo "Gradle project not found. Creating minimal project..."
            mkdir -p "${PROJECT_ROOT}/${APP_MODULE}/src/main/java/com/example"
            echo "rootProject.name = \"Titan\"" > "${PROJECT_ROOT}/settings.gradle"
            cat <<EOF > "${PROJECT_ROOT}/build.gradle"
            buildscript {
              repositories { google(); mavenCentral() }
              dependencies { classpath "com.android.tools.build:gradle:8.1.0" }
            }
            allprojects {
              repositories { google(); mavenCentral() }
            }
            EOF
            cat <<EOF > "${PROJECT_ROOT}/${APP_MODULE}/build.gradle"
            plugins { id 'com.android.application' }
            android {
              compileSdkVersion 34
              defaultConfig {
                applicationId "com.example.titan"
                minSdkVersion 24
                targetSdkVersion 34
                versionCode 1
                versionName "1.0"
              }
            }
            EOF
          else
            echo "Gradle project already exists at ${PROJECT_ROOT}"
          fi

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -euo pipefail
          cd "${PROJECT_ROOT}"
          ./gradlew --no-daemon :${APP_MODULE}:assembleDebug

      - name: Summarize Gradle errors (best-effort)
        if: failure()
        shell: bash
        run: |
          echo "==== Looking for Kotlin/Java error lines ===="
          grep -RIn --line-number --no-messages -E "error:" "${PROJECT_ROOT}" || true

      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs…"
          find . -type f -name "*.apk" -print || true

      - name: Debug: print project structure on failure
        if: failure()
        shell: bash
        run: |
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -print
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle" -o -name "settings.gradle.kts" \) -print

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/${{ env.APP_MODULE }}/build/outputs/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
