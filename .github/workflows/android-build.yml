name: Build Android (Titan subdir + auto-flatten + guards)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      # --- Optional: unzip rebuild zip if present ---
      - name: Unzip TitanApp_Rebuild.zip (if present)
        shell: bash
        run: |
          set -euo pipefail
          ZIP="Titan/TitanApp_Rebuild.zip"
          if [[ -f "$ZIP" ]]; then
            echo "Zip found: $ZIP"
            mkdir -p "$PROJECT_ROOT"
            # unzip *into* PROJECT_ROOT (quietly, overwrite)
            unzip -oq "$ZIP" -d "$PROJECT_ROOT"

            echo "After unzip, tree under $PROJECT_ROOT (depth 2):"
            find "$PROJECT_ROOT" -maxdepth 2 -print

            # --- Auto-FLATTEN: handle Titan/Titan/... nesting ---
            # cases we fix:
            # 1) $PROJECT_ROOT/Titan/app   -> move contents up into $PROJECT_ROOT
            # 2) $PROJECT_ROOT/$PROJECT_ROOT/app (rare) -> move up once
            if [[ -d "$PROJECT_ROOT/Titan/app" ]]; then
              echo "Flatten: moving $PROJECT_ROOT/Titan/* up into $PROJECT_ROOT"
              shopt -s dotglob nullglob
              mv "$PROJECT_ROOT"/Titan/* "$PROJECT_ROOT"/
              rmdir "$PROJECT_ROOT/Titan" || true
            elif [[ -d "$PROJECT_ROOT/$PROJECT_ROOT/app" ]]; then
              echo "Flatten: moving $PROJECT_ROOT/$PROJECT_ROOT/* up into $PROJECT_ROOT"
              shopt -s dotglob nullglob
              mv "$PROJECT_ROOT"/"$PROJECT_ROOT"/* "$PROJECT_ROOT"/
              rmdir "$PROJECT_ROOT/$PROJECT_ROOT" || true
            else
              echo "No flattening required."
            fi
          else
            echo "No rebuild zip found (skipping)."
          fi

      # --- GUARD: verify layout and give actionable hints ---
      - name: "Verify project layout (fail-fast with hints)"
        shell: bash
        run: |
          set -euo pipefail
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 2) =="
          find "$PROJECT_ROOT" -maxdepth 2 -print || true

          SETTINGS_FILE=""
          if [[ -f "$PROJECT_ROOT/settings.gradle.kts" ]]; then
            SETTINGS_FILE="$PROJECT_ROOT/settings.gradle.kts"
          elif [[ -f "$PROJECT_ROOT/settings.gradle" ]]; then
            SETTINGS_FILE="$PROJECT_ROOT/settings.gradle"
          fi

          APP_BUILD_FILE=""
          if compgen -G "$PROJECT_ROOT/$APP_MODULE/build.gradle.kts" > /dev/null; then
            APP_BUILD_FILE="$PROJECT_ROOT/$APP_MODULE/build.gradle.kts"
          elif compgen -G "$PROJECT_ROOT/$APP_MODULE/build.gradle" > /dev/null; then
            APP_BUILD_FILE="$PROJECT_ROOT/$APP_MODULE/build.gradle"
          fi

          ERR=0
          if [[ -z "$SETTINGS_FILE" ]]; then
            echo "::error::Missing settings.gradle(.kts) in '$PROJECT_ROOT'."
            echo "Hint: Create $PROJECT_ROOT/settings.gradle.kts with:"
            echo "  rootProject.name = \"Titan\""
            echo "  include(\":$APP_MODULE\")"
            ERR=1
          fi

          if [[ ! -d "$PROJECT_ROOT/$APP_MODULE" ]]; then
            echo "::error::Expected module directory '$PROJECT_ROOT/$APP_MODULE' not found."
            echo "Hint: Ensure the zip or repo has '$PROJECT_ROOT/$APP_MODULE' (e.g., Titan/app)."
            ERR=1
          elif [[ -z "$APP_BUILD_FILE" ]]; then
            echo "::error::Missing app build file in '$PROJECT_ROOT/$APP_MODULE' (build.gradle or .kts)."
            ERR=1
          fi

          if [[ $ERR -ne 0 ]]; then
            echo "Guard check failed. See errors above."
            exit 1
          fi

          echo "Using settings file: $SETTINGS_FILE"
          echo "Found module build file: $APP_BUILD_FILE"

      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [[ -f ./gradlew
