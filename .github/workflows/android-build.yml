name: Build Titan (Debug APK)

on:
  push:
    paths:
      - "TitanApp_Rebuild.zip"
      - ".github/workflows/android-build.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Unzip project
        run: unzip -q TitanApp_Rebuild.zip -d TitanApp

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Make gradlew executable (if present)
        working-directory: TitanApp
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          if [ -f TitanApp/gradlew ]; then
            echo "GRADLE_CMD=TitanApp/gradlew" >> "$GITHUB_OUTPUT"
          else
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d "$HOME/gradle"
            echo "$HOME/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      - name: Write settings.gradle(.kts) with repositories + include(":app")
        shell: bash
        run: |
          set -e
          ROOT="TitanApp"
          if [ -f "$ROOT/settings.gradle.kts" ]; then
            FILE="$ROOT/settings.gradle.kts"
          else
            FILE="$ROOT/settings.gradle"
          fi
          cat > "$FILE" <<'EOF'
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "TitanApp"
include(":app")
EOF
          echo "Wrote $FILE"

      - name: Force Java 17 + Compose opts in app build file
        shell: bash
        run: |
          set -e
          APP_KTS="TitanApp/app/build.gradle.kts"
          APP_GROOVY="TitanApp/app/build.gradle"
          mkdir -p TitanApp/app

          if [ -f "$APP_KTS" ]; then
            cat > "$APP_KTS" <<'EOF'
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.example.titan"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.titan"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
    }

    buildFeatures { compose = true }

    composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += listOf(
            "-Xskip-prerelease-check",
            "-opt-in=kotlin.RequiresOptIn"
        )
    }
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
}
EOF
          elif [ -f "$APP_GROOVY" ]; then
            cat > "$APP_GROOVY" <<'EOF'
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.titan'
    compileSdk 34

    defaultConfig {
        applicationId 'com.example.titan'
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName '1.0'
    }

    buildFeatures { compose true }

    composeOptions { kotlinCompilerExtensionVersion '1.5.14' }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += ['-Xskip-prerelease-check', '-opt-in=kotlin.RequiresOptIn']
    }
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}
EOF
          else
            echo "::error::Neither build.gradle.kts nor build.gradle found under TitanApp/app"
            exit 1
          fi

      - name: Build Debug APK (verbose)
        shell: bash
        run: |
          set -e
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          if [ "$CMD" = "gradle" ]; then
            gradle -p TitanApp --no-daemon :app:assembleDebug --stacktrace --info
          else
            "$CMD" -p TitanApp --no-daemon :app:assembleDebug --stacktrace --info
          fi

      - name: Debug: print project structure on failure
        if: failure()
        shell: bash
        run: |
          echo "== Gradle files =="
          find TitanApp -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" \)
          echo "== App directory listing =="
          ls -la TitanApp/app || true

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            TitanApp/app/build/outputs/apk/debug/*.apk
            TitanApp/**/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
