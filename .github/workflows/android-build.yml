name: Build Android (Titan subdir)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # No Gradle cache -> avoids path matching errors
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Verify project layout
        shell: bash
        run: |
          set -e
          echo "== repo root =="
          ls -la
          echo "== ${PROJECT_ROOT} =="
          ls -la "${PROJECT_ROOT}" || true
          echo "== quick tree =="
          find "${PROJECT_ROOT}" -maxdepth 3 -type f -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle" -o -name "settings.gradle.kts" -o -name "AndroidManifest.xml" -print | sed 's/^/  /'
          # Hard fail if the expected module folder is missing
          if [ ! -d "${PROJECT_ROOT}/${APP_MODULE}" ]; then
            echo "::error::Expected directory '${PROJECT_ROOT}/${APP_MODULE}' not found. Check your repo layout."
            exit 2
          fi

      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -e
          cd "${PROJECT_ROOT}"
          if [ -f ./gradlew ]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            cd ..
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d "$HOME/gradle"
            echo "$HOME/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -e
          cd "${PROJECT_ROOT}"
          "${{ steps.gradle.outputs.GRADLE_CMD }}" --no-daemon ":${APP_MODULE}:assembleDebug" --stacktrace --info

      - name: "Debug: print project structure on failure"
        if: ${{ failure() }}
