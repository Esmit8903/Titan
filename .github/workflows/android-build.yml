name: Build Titan (Debug APK)

on:
  push:
    paths:
      - 'TitanApp_Rebuild.zip'
      - '.github/workflows/android-build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Unzip project
        run: unzip -q TitanApp_Rebuild.zip -d TitanApp

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Detect Android project dir
        id: detect
        shell: bash
        run: |
          set -e
          D="$(dirname "$(find TitanApp -maxdepth 3 -name build.gradle -o -name build.gradle.kts | head -n1)")"
          if [ -z "$D" ] || [ "$D" = "." ]; then
            D="$(find TitanApp -maxdepth 4 -type d -path "*/app" | head -n1 | xargs dirname)"
          fi
          D="${D:-TitanApp}"
          echo "PROJECT_DIR=$D" >> "$GITHUB_OUTPUT"
          echo "Detected PROJECT_DIR=$D"

      - name: Make gradlew executable if present
        working-directory: ${{ steps.detect.outputs.PROJECT_DIR }}
        shell: bash
        run: if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.PROJECT_DIR }}"
          if [ -f ./gradlew ]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            cd ~
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip
            echo "$HOME/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      - name: Write settings.gradle.kts (pluginManagement + repos)
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.detect.outputs.PROJECT_DIR }}"
          cat > "$ROOT/settings.gradle.kts" <<'EOF'
pluginManagement {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
  plugins {
    id("com.android.application") version "8.5.2"
    id("org.jetbrains.kotlin.android") version "1.9.24"
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = "TitanApp"
include(":app")
EOF
          echo "Wrote $ROOT/settings.gradle.kts"

      - name: Ensure app/build.gradle.kts exists and is Java 17/Compose friendly
        shell: bash
        run: |
          set -e
          APP_KTS="${{ steps.detect.outputs.PROJECT_DIR }}/app/build.gradle.kts"
          mkdir -p "${{ steps.detect.outputs.PROJECT_DIR }}/app"
          # Always write a clean, known-good file (simplest & avoids partial-heredoc issues)
          cat > "$APP_KTS" <<'EOF'
plugins {
  id("com.android.application")
  id("org.jetbrains.kotlin.android")
}

android {
  namespace = "com.example.titan"
  compileSdk = 34

  defaultConfig {
    applicationId = "com.example.titan"
    minSdk = 26
    targetSdk = 34
    versionCode = 1
    versionName = "1.0"
  }

  buildFeatures { compose = true }

  composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
  }

  kotlinOptions {
    jvmTarget = "17"
    freeCompilerArgs += listOf(
      "-Xskip-prerelease-check",
      "-opt-in=kotlin.RequiresOptIn"
    )
  }
}

dependencies {
  implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
  implementation("androidx.core:core-ktx:1.12.0")
  implementation("androidx.appcompat:appcompat:1.6.1")

  implementation(platform("androidx.compose:compose-bom:2024.06.00"))
  implementation("androidx.activity:activity-compose:1.9.0")
  implementation("androidx.compose.ui:ui")
  implementation("androidx.compose.ui:ui-tooling-preview")
  implementation("androidx.compose.material3:material3")

  debugImplementation("androidx.compose.ui:ui-tooling")
  debugImplementation("androidx.compose.ui:ui-test-manifest")
}
EOF
          echo "Wrote $APP_KTS"

      - name: Build Debug APK (verbose)
        shell: bash
        run: |
          set -e
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${{ steps.detect.outputs.PROJECT_DIR }}" --no-daemon :app:assembleDebug --stacktrace --info

      - name: Debug print project structure on failure
        if: failure()
        shell: bash
        run: |
          echo "== Gradle files found =="
          find "${{ steps.detect.outputs.PROJECT_DIR }}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" \) -print
          echo "== App directory listing =="
          ls -la "${{ steps.detect.outputs.PROJECT_DIR }}/app" || true
          echo "== Gradle output tree =="
          find "${{ steps.detect.outputs.PROJECT_DIR }}/app/build/outputs" -maxdepth 4 -type f | sed 's/^/  /' || true

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ steps.detect.outputs.PROJECT_DIR }}/app/build/outputs/apk/debug/*.apk
            ${{ steps.detect.outputs.PROJECT_DIR }}/**/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
