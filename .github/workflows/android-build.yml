name: Build Android (Titan)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan       # top-level folder in your repo
      APP_MODULE: app           # we expect Titan/app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      # --- OPTIONAL ZIP CONTENT (if present) ---
      - name: If present, unzip TitanApp_Rebuild.zip into $PROJECT_ROOT
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "$PROJECT_ROOT/TitanApp_Rebuild.zip" ]; then
            echo "Found rebuild zip. Unzipping into $PROJECT_ROOT ..."
            unzip -o "$PROJECT_ROOT/TitanApp_Rebuild.zip" -d "$PROJECT_ROOT" >/dev/null
          else
            echo "No rebuild zip found. Continuing..."
          fi

      # --- AUTO-CREATE A TINY PROJECT IF MISSING ---
      - name: Ensure Gradle project exists (or generate tiny app)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$PROJECT_ROOT"
          APP_DIR="$ROOT/$APP_MODULE"

          # normalize wrong-cased Titan/App -> Titan/app
          if [ -d "$ROOT/App" ] && [ ! -d "$APP_DIR" ]; then
            echo "Renaming $ROOT/App -> $APP_DIR (case fix)"
            git mv -f "$ROOT/App" "$APP_DIR" 2>/dev/null || mv "$ROOT/App" "$APP_DIR"
          fi

          mkdir -p "$APP_DIR/src/main/java/com/example/titan"
          mkdir -p "$APP_DIR/src/main/res/values"

          # settings.gradle(.kts)
          if [ -f "$ROOT/settings.gradle.kts" ]; then
            SETTINGS="$ROOT/settings.gradle.kts"
          elif [ -f "$ROOT/settings.gradle" ]; then
            SETTINGS="$ROOT/settings.gradle"
          else
            SETTINGS="$ROOT/settings.gradle.kts"
          fi

          cat > "$SETTINGS" <<'EOF'
          pluginManagement {
            repositories {
              gradlePluginPortal()
              google()
              mavenCentral()
            }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
              google()
              mavenCentral()
            }
          }
          rootProject.name = "Titan"
          include(":app")
          EOF

          # If the module name is not 'app', rewrite include
          if [ "$APP_MODULE" != "app" ]; then
            sed -i "s/include(\":app\")/include(\":$APP_MODULE\")/" "$SETTINGS"
          fi

          # app/build.gradle.kts
          APP_KTS="$APP_DIR/build.gradle.kts"
          if [ ! -f "$APP_KTS" ]; then
            cat > "$APP_KTS" <<'EOF'
            plugins {
              id("com.android.application")
              id("org.jetbrains.kotlin.android")
            }

            android {
              namespace = "com.example.titan"
              compileSdk = 34

              defaultConfig {
                applicationId = "com.example.titan"
                minSdk = 26
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"
              }

              buildFeatures { compose = true }
              composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }

              compileOptions {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
              }

              kotlinOptions {
                jvmTarget = "17"
                freeCompilerArgs += listOf(
                  "-Xskip-prerelease-check",
                  "-opt-in=kotlin.RequiresOptIn"
                )
              }
            }

            dependencies {
              implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
              implementation("androidx.core:core-ktx:1.12.0")
              implementation("androidx.appcompat:appcompat:1.6.1")
            }
            EOF
          fi

          # minimal sources if missing
          if [ ! -f "$APP_DIR/src/main/AndroidManifest.xml" ]; then
            cat > "$APP_DIR/src/main/AndroidManifest.xml" <<'EOF'
            <manifest package="com.example.titan" xmlns:android="http://schemas.android.com/apk/res/android">
              <application android:label="Titan" android:icon="@mipmap/ic_launcher">
                <activity android:name=".MainActivity">
                  <intent-filter>
                    <action android:name="android.intent.action.MAIN"/>
                    <category android:name="android.intent.category.LAUNCHER"/>
                  </intent-filter>
                </activity>
              </application>
            </manifest>
            EOF
          fi

          if [ ! -f "$APP_DIR/src/main/java/com/example/titan/MainActivity.kt" ]; then
            cat > "$APP_DIR/src/main/java/com/example/titan/MainActivity.kt" <<'EOF'
            package com.example.titan

            import android.os.Bundle
            import androidx.activity.ComponentActivity
            import androidx.activity.compose.setContent
            import androidx.compose.material3.Text

            class MainActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContent { Text("Hello, Titan!") }
              }
            }
            EOF
          fi

          if [ ! -f "$APP_DIR/src/main/res/values/strings.xml" ]; then
            cat > "$APP_DIR/src/main/res/values/strings.xml" <<'EOF'
            <resources>
              <string name="app_name">Titan</string>
            </resources>
            EOF
          fi

          echo "Project ensured at $ROOT ; module at $APP_DIR"

      # --- VERIFY (now that we can auto-create) ---
      - name: Verify project layout (fail-fast with hints)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$PROJECT_ROOT"
          APP_DIR="$ROOT/$APP_MODULE"
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "$ROOT" -maxdepth 3 -printf "%y %p\n" | sort
          echo "== Gradle files under $ROOT (depth 3) =="
          find "$ROOT" -maxdepth 3 -name "settings.gradle*" -o -name "build.gradle*" | sort || true
          if [ ! -d "$APP_DIR" ]; then
            echo "::error::Expected directory '$APP_DIR' (module '$APP_MODULE') not found."
            echo "::error::Either rename your module folder to '$APP_MODULE' or set APP_MODULE accordingly."
            exit 1
          fi

      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -e
          cd "${PROJECT_ROOT}"
          if [ -f ./gradlew ]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            cd ~
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d "$HOME/gradle"
            echo "$HOME/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -e
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${PROJECT_ROOT}" --no-daemon :${APP_MODULE}:assembleDebug --stacktrace

      # --- Helpful diagnostics on failure ---
      - name: Summarize Gradle errors (best-effort)
        if: failure()
        shell: bash
        run: |
          echo "==== Looking for Kotlin/Java error lines ===="
          grep -RIn --line-number --no-messages -E "e: | error: | FAILED" "${PROJECT_ROOT}" || true

      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs..."
          find -type f -name "*.apk" -print || true

      - name: "Debug: print project structure on failure"
        if: failure()
        shell: bash
        run: |
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -printf "%y %p\n" | sort
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle*" -o -name "settings.gradle*" \) -print | sort

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/${{ env.APP_MODULE }}/build/outputs/apk/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
