name: Build Android (autocreate app if missing)

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4

      # Optional: unzip your project skeleton if you add TitanApp_Rebuild.zip
      - name: "Unzip TitanApp_Rebuild.zip (if present)"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f TitanApp_Rebuild.zip ]; then
            echo "Found TitanApp_Rebuild.zip — extracting..."
            unzip -o TitanApp_Rebuild.zip -d .
          else
            echo "No TitanApp_Rebuild.zip found — skipping."
          fi

      # Autocreate a tiny Android Gradle project if Titan/app doesn't exist
      - name: "Ensure Gradle project exists (auto-generate tiny app)"
        shell: bash
        run: |
          set -euo pipefail

          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"

          if [ -d "$ROOT/$APP" ] && [ -f "$ROOT/settings.gradle.kts" ]; then
            echo "Existing Gradle project detected at $ROOT/$APP"
            exit 0
          fi

          echo "No Gradle project found. Creating a minimal Android app under $ROOT/$APP ..."

          mkdir -p "$ROOT/$APP/src/main/java/com/example/helloworld"
          mkdir -p "$ROOT/$APP/src/main/res/layout"
          mkdir -p "$ROOT/$APP/src/main/res/values"

          # settings.gradle.kts
          cat > "$ROOT/settings.gradle.kts" <<'EOF'
          pluginManagement {
            repositories {
              gradlePluginPortal()
              google()
              mavenCentral()
            }
          }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
              google()
              mavenCentral()
            }
          }
          rootProject.name = "Titan"
          include(":app")
          EOF

          # build.gradle.kts (root)
          cat > "$ROOT/build.gradle.kts" <<'EOF'
          buildscript {
            repositories {
              google()
              mavenCentral()
            }
            dependencies {
              classpath("com.android.tools.build:gradle:8.2.2")
              classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10")
            }
          }
          allprojects {
            repositories {
              google()
              mavenCentral()
            }
          }
          EOF

          # app/build.gradle.kts
          cat > "$ROOT/$APP/build.gradle.kts" <<'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
          }

          android {
            namespace = "com.example.helloworld"
            compileSdk = 34

            defaultConfig {
              applicationId = "com.example.helloworld"
              minSdk = 24
              targetSdk = 34
              versionCode = 1
              versionName = "1.0"
            }

            buildTypes {
              release {
                isMinifyEnabled = false
                proguardFiles(
                  getDefaultProguardFile("proguard-android-optimize.txt"),
                  "proguard-rules.pro"
                )
              }
            }

            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions {
              jvmTarget = "17"
            }
          }

          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
          }
          EOF

          # AndroidManifest.xml
          cat > "$ROOT/$APP/src/main/AndroidManifest.xml" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.helloworld">
            <application
                android:label="Titan"
                android:icon="@mipmap/ic_launcher"
                android:allowBackup="true"
                android:supportsRtl="true">
              <activity
                  android:name="com.example.helloworld.MainActivity"
                  android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          # MainActivity.kt
          cat > "$ROOT/$APP/src/main/java/com/example/helloworld/MainActivity.kt" <<'EOF'
          package com.example.helloworld

          import android.os.Bundle
          import androidx.appcompat.app.AppCompatActivity

          class MainActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)
            }
          }
          EOF

          # activity_main.xml
          cat > "$ROOT/$APP/src/main/res/layout/activity_main.xml" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:gravity="center"
              android:orientation="vertical">
            <TextView
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:text="Hello Titan!" />
          </LinearLayout>
          EOF

          # strings.xml
          mkdir -p "$ROOT/$APP/src/main/res/values"
          cat > "$ROOT/$APP/src/main/res/values/strings.xml" <<'EOF'
          <resources>
            <string name="app_name">Titan</string>
          </resources>
          EOF

      - name: "Set up Java 17"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: "Set up Android SDK"
        uses: android-actions/setup-android@v3

      - name: "Install SDK components"
        shell: bash
        run: |
          sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: "Make gradlew executable (if present)"
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      - name: "Pick Gradle (wrapper or 8.7)"
        id: gradle
        shell: bash
        run: |
          set -e
          cd "${PROJECT_ROOT}"
          if [ -f ./gradlew ]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            cd ..
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip -d "$HOME"
