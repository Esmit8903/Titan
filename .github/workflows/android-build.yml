name: Build Android (Titan with ZIP restore + strong checks)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan
      APP_MODULE: app

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: |
          sdkmanager "platforms;android-34" "build-tools;34.0.0"

      # ---------- ZIP VALIDATION & RESTORE ----------
      - name: "If present, validate & unzip 'TitanApp_Rebuild.zip' into PROJECT_ROOT"
        shell: bash
        run: |
          set -euo pipefail
          ZIP="TitanApp_Rebuild.zip"
          DEST="${PROJECT_ROOT}"

          if [[ -f "$ZIP" ]]; then
            echo "Zip found: $ZIP"
            echo "Running 'unzip -tq' to validate integrity..."
            if ! unzip -tq "$ZIP" >/dev/null 2>&1; then
              echo "::error::Zip file '$ZIP' is corrupt or unreadable. Re-upload a valid archive and re-run."
              exit 2
            fi

            echo "Clearing any stale ${DEST}/app (files blocking dir creation)..."
            # Remove only if it exists; don't fail if not there
            rm -rf "${DEST}/app" || true

            echo "Unzipping into '${DEST}/'…"
            mkdir -p "$DEST"
            # -o overwrite, -q quiet
            unzip -oq "$ZIP" -d "$DEST"

            echo "Zip extraction finished."
          else
            echo "No '$ZIP' in repo root; continuing with files already in '${DEST}/'."
          fi

      # ---------- HARD FAIL EARLY IF PROJECT SHAPE IS WRONG ----------
      - name: "Verify project layout (fail-fast with hints)"
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${PROJECT_ROOT}"
          APP="${APP_MODULE}"

          echo "== repo root =="
          ls -la
          echo
          echo "== quick tree (depth 2) =="
          find "$ROOT" -maxdepth 2 -printf "%y %p\n" | sort

          # settings file (kts or groovy)
          SETTINGS=""
          if [[ -f "${ROOT}/settings.gradle.kts" ]]; then
            SETTINGS="${ROOT}/settings.gradle.kts"
          elif [[ -f "${ROOT}/settings.gradle" ]]; then
            SETTINGS="${ROOT}/settings.gradle"
          fi

          if [[ -z "$SETTINGS" ]]; then
            echo "::error::Missing settings file under '${ROOT}'. Create one with e.g.:
            pluginManagement {
              repositories { gradlePluginPortal(); google(); mavenCentral() }
            }
            dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories { google(); mavenCentral() }
            }
            rootProject.name = \"Titan\"
            include(\":${APP}\")"
            exit 3
          fi
          echo "Using settings file: $SETTINGS"

          # app module directory MUST be a directory
          if [[ ! -d "${ROOT}/${APP}" ]]; then
            echo "::error::Expected directory '${ROOT}/${APP}' (module '${APP}') not found."
            echo "If you restored from zip, ensure it contained '${APP}/' as a directory."
            exit 4
          fi

          # build.gradle(.kts) must exist inside app
          if [[ ! -f "${ROOT}/${APP}/build.gradle" && ! -f "${ROOT}/${APP}/build.gradle.kts" ]]; then
            echo "::error::Missing module build file in '${ROOT}/${APP}/' (build.gradle or build.gradle.kts)."
            exit 5
          fi

          echo "Project layout looks OK."

      # ---------- MAKE GRADLEW EXECUTABLE IF PRESENT ----------
      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f ./gradlew ]]; then chmod +x ./gradlew; fi

      # ---------- PICK GRADLE (WRAPPER OR 8.7) ----------
      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -euo pipefail
          cd "${PROJECT_ROOT}"
          if [[ -f ./gradlew ]]; then
            echo "Using wrapper."
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            echo "No wrapper; downloading Gradle 8.7…"
            cd ~
            curl -sSL -o gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -q gradle.zip
            echo "$HOME/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      # ---------- BUILD ----------
      - name: "Build Debug APK (capture full log)"
        shell: bash
        run: |
          set -euo pipefail
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${PROJECT_ROOT}" --no-daemon ":${APP_MODULE}:assembleDebug" --stacktrace --info

      # ---------- BEST-EFFORT ERROR HINTS ----------
      - name: "Summarize Gradle errors (best-effort)"
        if: failure()
        shell: bash
        run: |
          set -e
          echo "==== Looking for Kotlin/Java error lines ===="
          # Grep last 3000 lines of the full job log if present in local file (best effort)
          # Fallback: search project for common markers
          grep -RIn --line-number --no-messages -e "e: " -e "FAILED" -e "error:" "${PROJECT_ROOT}" || true

      # ---------- SHOW ANY APKS ANYWHERE (DIAGNOSTIC) ----------
      - name: "Show any APKs that exist (any path)"
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "Searching for APKs..."
          find . -type f -name "*.apk" -print || true

      # ---------- DEBUG TREE ON FAILURE ----------
      - name: "Debug: print project structure on failure"
        if: failure()
        shell: bash
        run: |
          set -e
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -printf "%y %p\n" | sort
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "settings.gradle" -o -name "settings.gradle.kts" \) -print

      # ---------- UPLOAD ANY APKS FROM THE APP MODULE ----------
      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/${{ env.APP_MODULE }}/build/outputs/apk/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
