name: Build Android (Titan subdir, with zip import + strong diagnostics)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_ROOT: Titan          # path where settings.gradle(.kts) lives
      APP_MODULE: app              # module that applies com.android.application

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------- Optional #2: import the zip if present ----------
      - name: If present, unzip TitanApp_Rebuild.zip into $PROJECT_ROOT
        shell: bash
        run: |
          set -euo pipefail
          ZIP_IN_REPO="$PROJECT_ROOT/TitanApp_Rebuild.zip"
          if [[ -f "$ZIP_IN_REPO" ]]; then
            echo "Found $ZIP_IN_REPO — unzipping into $PROJECT_ROOT ..."
            unzip -oq "$ZIP_IN_REPO" -d "$PROJECT_ROOT"
          else
            echo "No $ZIP_IN_REPO — skipping optional import."
          fi

      # ---------- Java & Android SDK ----------
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0"

      # ---------- Preflight guards that explain what's wrong ----------
      - name: Verify project layout (fail-fast with hints)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$PROJECT_ROOT"
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 2) =="
          find "$ROOT" -maxdepth 2 -print

          echo "== Gradle files under $ROOT (depth 3) =="
          find "$ROOT" -maxdepth 3 \( -name "settings.gradle" -o -name "settings.gradle.kts" -o -name "build.gradle" -o -name "build.gradle.kts" -o -name "gradle.properties" \) -print

          # 1) settings.gradle(.kts) must exist
          SETTINGS=""
          if [[ -f "$ROOT/settings.gradle.kts" ]]; then SETTINGS="$ROOT/settings.gradle.kts"; fi
          if [[ -z "$SETTINGS" && -f "$ROOT/settings.gradle" ]]; then SETTINGS="$ROOT/settings.gradle"; fi
          if [[ -z "$SETTINGS" ]]; then
            echo "::error::Missing settings.gradle(.kts) in '$ROOT'."
            echo "       Create one with at least:  rootProject.name = \"Titan\"  and  include(\":$APP_MODULE\")"
            exit 1
          fi
          echo "Using settings file: $SETTINGS"

          # 2) app module build file must exist
          APP_DIR="$ROOT/$APP_MODULE"
          if [[ ! -d "$APP_DIR" ]]; then
            echo "::error::Expected directory '$APP_DIR' (module '$APP_MODULE') not found."
            echo "       Either set APP_MODULE correctly or create the module at that path."
            exit 1
          fi
          if [[ ! -f "$APP_DIR/build.gradle" && ! -f "$APP_DIR/build.gradle.kts" ]]; then
            echo "::error::No build.gradle(.kts) in '$APP_DIR'."
            echo "       Add a module build file that applies 'com.android.application'."
            exit 1
          fi

          # 3) settings must include the module
          if ! grep -qE "include\\([\"']:$APP_MODULE[\"']\\)" "$SETTINGS"; then
            echo "::warning::'$SETTINGS' does not include(\":$APP_MODULE\"). Gradle may ignore the app module."
            echo "           Add:  include(\":$APP_MODULE\")"
          fi

      # ---------- Gradle wrapper or plain Gradle ----------
      - name: Make gradlew executable (if present)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          if [[ -f ./gradlew ]]; then chmod +x ./gradlew; fi

      - name: Pick Gradle (wrapper or 8.7)
        id: gradle
        shell: bash
        run: |
          set -euo pipefail
          cd "${PROJECT_ROOT}"
          if [[ -f ./gradlew ]]; then
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_OUTPUT"
          else
            echo "No gradlew; downloading Gradle 8.7..."
            cd ~
            curl -sSLo gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
            unzip -oq gradle.zip
            echo "$HOME/gradle-8.7/bin" >> "$GITHUB_PATH"
            echo "GRADLE_CMD=gradle" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Build with very verbose logging ----------
      - name: Build Debug APK (capture full log)
        shell: bash
        run: |
          set -euo pipefail
          CMD="${{ steps.gradle.outputs.GRADLE_CMD }}"
          "$CMD" -p "${PROJECT_ROOT}" --no-daemon \
            :${APP_MODULE}:assembleDebug \
            --stacktrace --info

      # ---------- Helpful summaries & structure ----------
      - name: Summarize Gradle errors (best-effort)
        if: failure()
        shell: bash
        run: |
          echo "==== Looking for Kotlin/Java error lines ===="
          # Look for common error lines inside the project
          grep -RIn --line-number --no-messages \
            -e "^e: " \
            -e "error:" \
            -e "FAILED" \
            "${PROJECT_ROOT}" || true

      - name: Show any APKs that exist (any path)
        if: always()
        shell: bash
        run: |
          set -e
          echo "Searching for APKs..."
          find . -type f -name "*.apk" -print || true

      - name: "Debug: print project structure on failure"
        if: failure()
        shell: bash
        run: |
          echo "== repo root =="
          ls -la
          echo "== quick tree (depth 3) =="
          find "${PROJECT_ROOT}" -maxdepth 3 -print
          echo "== Gradle files =="
          find "${PROJECT_ROOT}" -maxdepth 3 \( -name "settings.gradle" -o -name "settings.gradle.kts" -o -name "build.gradle" -o -name "build.gradle.kts" -o -name "gradle.properties" \) -print

      # ---------- Artifacts (collect anything Gradle produced) ----------
      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: titan-debug-apk
          path: |
            ${{ env.PROJECT_ROOT }}/${{ env.APP_MODULE }}/build/outputs/apk/**/*.apk
            ${{ env.PROJECT_ROOT }}/**/outputs/apk/**/*.apk
            **/build/outputs/apk/**/*.apk
          if-no-files-found: warn
